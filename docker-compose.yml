services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_network

  redis:
      image: redis:latest
      ports:
        - "6379:6379"
      command: ["redis-server", "--appendonly", "yes"]
      restart: always
      networks:
        - my_network

  ignite:
    image: apacheignite/ignite:latest
    ports:
      - "10800:10800"  # Ignite thin client port
      - "47100:47100"  # Communication SPI port
      - "47500-47509:47500-47509"  # Discovery SPI ports
    environment:
      - OPTION_LIBS=ignite-rest-http,ignite-spring
    restart: always
    networks:
      - my_network

  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"  # Default port for Cassandra CQL
    volumes:      
      - ./data.cql:/docker-entrypoint-initdb.d/data.cql  # Mount the CQL script
    networks:
      - my_network

  etcd:
    image: bitnami/etcd:latest
    ports:
      - "2378:2379"  # Etcd client communication port
      - "2377:2380"  # Etcd peer communication port
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
    restart: always
    networks:
      - my_network

  couchbase:
    image: couchbase:latest
    ports:
      - "8091-8094:8091-8094"  # Couchbase web console, REST API, and query services
      - "11210:11210"  # Couchbase data service port
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=Administrator
      - COUCHBASE_ADMINISTRATOR_PASSWORD=password
      - COUCHBASE_BUCKET=my_bucket  # Create a default bucket
    restart: always
    networks:
      - my_network

  robotic-arm-service-1:
    image: robotic-arm-service
    build:
      context: ./ # Path to the directory containing the Dockerfile
      dockerfile: RoboticArm/Dockerfile  # Name of the Dockerfile (adjust if different)
    depends_on:
      - taskcoordinator
    ports:
      - "8080:80"  # Adjust the port mapping as needed
    environment:
      ARM_ID: 1
      KAFKA_TELEMETRY_TOPIC: telemetry-topic
      KAFKA_EMERGENCY_TOPIC: emergency-topic
      KAFKA_TASKS_TOPIC: robotic-arm-tasks-topic-1
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: robotic-arm-1
    restart: always
    networks:
      - my_network

  robotic-arm-service-2:
    image: robotic-arm-service
    build:
      context: ./ # Path to the directory containing the Dockerfile
      dockerfile: RoboticArm/Dockerfile  # Name of the Dockerfile (adjust if different)
    depends_on:
      - taskcoordinator
    ports:
      - "8080:80"  # Adjust the port mapping as needed
    environment:
      ARM_ID: 2
      KAFKA_TELEMETRY_TOPIC: telemetry-topic
      KAFKA_EMERGENCY_TOPIC: emergency-topic
      KAFKA_TASKS_TOPIC: robotic-arm-tasks-topic-2
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: robotic-arm-2
    restart: always
    networks:
      - my_network

  robotic-arm-service-3:
    image: robotic-arm-service
    build:
      context: ./ # Path to the directory containing the Dockerfile
      dockerfile: RoboticArm/Dockerfile  # Name of the Dockerfile (adjust if different)
    depends_on:
      - taskcoordinator
    ports:
      - "8080:80"  # Adjust the port mapping as needed
    environment:
      ARM_ID: 3
      KAFKA_TELEMETRY_TOPIC: telemetry-topic
      KAFKA_EMERGENCY_TOPIC: emergency-topic
      KAFKA_TASKS_TOPIC: robotic-arm-tasks-topic-3
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: robotic-arm-3
    restart: always
    networks:
      - my_network

  taskcoordinator:
    image: taskcoordinatorservice:latest
    build:
      context: ./
      dockerfile: CentralComponent/TaskCoordinatorService/Dockerfile
    container_name: taskcoordinatorservice
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      KAFKA_CONSUMER_GROUP_ID: task-coordinator-consumer-group    
    ports:
      - "5001:80"   # Map HTTP port for web traffic
      - "5005:5005" # Map debugging port
    depends_on:
      - kafka
    command: ["dotnet", "TaskCoordinatorService.dll", "--urls", "http://0.0.0.0:80"]
    networks:
      - my_network

  monitoring:
    image: monitoringservice:latest  
    build:
      context: ./
      dockerfile: CentralComponent/MonitoringService/Dockerfile
    container_name: monitoringservice
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      KAFKA_CONSUMER_GROUP_ID: monitoring-consumer-group    
      KAFKA_EMERGENCY_TOPIC: emergency-topic
      KAFKA_TELEMETRY_TOPIC: telemetry-topic
      KAFKA_TASKCOORDINATOR_TOPIC: task-coordinator-topic
      KAFKA_BROKER: kafka:9092
      GRPC_SERVER_ADDRESS: http://storage-middleware-api:80
    depends_on:
      - taskcoordinator
    command: ["dotnet", "MonitoringService.dll", "--urls", "http://0.0.0.0:80"]
    networks:
      - my_network

  event-handler:
    image: event-handler
    build:
      context: ./
      dockerfile: CentralComponent/EventHandlerService/Dockerfile  # Name of the Dockerfile (adjust if different)
    depends_on:
      - taskcoordinator
    environment:
      GRPC_SERVER_ADDRESS: http://storage-middleware-api:80
      KAFKA_BROKER: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: monitoring-consumer-group    
      KAFKA_TELEMETRY_TOPIC: telemetry-topic
      KAFKA_EMERGENCY_TOPIC: emergency-topic
    restart: always
    networks:
      - my_network

  storage-middleware-api:
    image: storage-middleware-api
    build:
      context: ./
      dockerfile: StorageMiddleware/StorageMiddlewareApi/Dockerfile
    depends_on:
      - redis
      - ignite
      - cassandra
      - etcd
      - couchbase
    ports:
      - "7001:80"
    restart: always
    environment:
      SELECTED_PERSISTED_STORAGE: cassandra
      SELECTED_CACHE_STORAGE: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      IGNITE_HOST: ignite
      IGNITE_PORT: 10800
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: test_keyspace
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      COUCHBASE_HOST: couchbase
      COUCHBASE_PORT: 8091
      COUCHBASE_USERNAME: Administrator
      COUCHBASE_PASSWORD: password
    networks:
      - my_network

networks:
  my_network:
    driver: bridge